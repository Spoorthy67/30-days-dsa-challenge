class Solution {
    public int[][] kClosest(int[][] points, int k) {
        // Max-heap based on distance from origin
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>(
            (a, b) -> distance(b) - distance(a)
        );

        for (int[] point : points) {
            maxHeap.offer(point);
            if (maxHeap.size() > k) {
                maxHeap.poll(); // remove the farthest point if size exceeds k
            }
        }

        // Convert heap to array
        int[][] result = new int[k][2];
        int index = 0;
        for (int[] point : maxHeap) {
            result[index++] = point;
        }
        return result;
    }

    // Helper method to calculate squared distance to origin
    private int distance(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }
}
